/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with founders and admins having elevated privileges.
 *
 * Data Structure:
 * - /projects/{projectId}: Stores project information. Publicly readable, but write access restricted to founders and admins.
 * - /users/{userId}: Stores user profile information. Accessible to the owner or founders/admins.
 * - /settings/appDetails: Stores global app settings. Write access restricted to founders and admins.
 *
 * Key Security Decisions:
 * - User profiles cannot be deleted.
 * - Founders and admins can read all user profiles.
 * - Read-only access to the settings document is granted to all users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by the user who owns the resource.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {bool} True if the request is made by the owner, false otherwise.
     * @example isOwner("user123") returns true if request.auth.uid == "user123".
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by a founder or an admin.
     * @return {bool} True if the request is made by a founder or an admin, false otherwise.
     * @example isFounderOrAdmin() returns true if the user's document has isFounder or isAdmin set to true.
     */
    function isFounderOrAdmin() {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return userDoc.data.isFounder == true || userDoc.data.isAdmin == true;
    }

    /**
     * @description Defines security rules for the /projects/{projectId} collection.
     * @path /projects/{projectId}
     * @allow (get, list): Allows any user to read project data.
     * @allow (create, update, delete): Allows founders or admins to modify project data.
     * @deny (create, update, delete): Denies non-founders/admins from modifying project data.
     * @principle Allows public read access, but restricts write access to authorized roles (founders, admins).
     */
    match /projects/{projectId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && isFounderOrAdmin();
      allow update: if request.auth != null && isFounderOrAdmin();
      allow delete: if request.auth != null && isFounderOrAdmin();
    }

    /**
     * @description Defines security rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (get): Allows the owner or founders/admins to read the user profile.
     * @allow (create): Allows a user to create their own profile.
     * @allow (update): Allows the owner to update their own profile.
     * @deny (delete): Profiles cannot be deleted.
     * @deny (create): Denies creating a profile with a different user ID than the authenticated user.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if request.auth != null && (isOwner(userId) || isFounderOrAdmin());
      allow list: if request.auth != null && isFounderOrAdmin();
      allow create: if request.auth != null && isOwner(userId);
      allow update: if request.auth != null && isOwner(userId);
      allow delete: if false;
    }

     /**
      * @description Defines security rules for the /settings/appDetails document.
      * @path /settings/appDetails
      * @allow (get, list): Allows any user to read the settings document.
      * @allow (create, update, delete): Allows founders or admins to modify the settings.
      * @deny (create, update, delete): Denies non-founders/admins from modifying the settings.
      * @principle Allows public read access, but restricts write access to authorized roles (founders, admins).
      */
    match /settings/appDetails {
      allow get: if true;
      allow list: if false;
      allow create: if request.auth != null && isFounderOrAdmin();
      allow update: if request.auth != null && isFounderOrAdmin();
      allow delete: if request.auth != null && isFounderOrAdmin();
    }
  }
}