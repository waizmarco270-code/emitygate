/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles
 * and allows public read access for projects, with owner-only writes.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile data.
 * - /projects/{projectId}: Stores project details.
 *
 * Key Security Decisions:
 * - User profiles are strictly owned by the user with matching user ID.
 * - Projects are publicly readable, but only owners can create, update, or delete them.
 *
 * Denormalization for Authorization:
 * - Projects do not currently have an ownerId field.
 *
 * Structural Segregation:
 * - There is no segregation between public and private data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their profile.
     * @allow (get, list, update, delete) User with matching ID can access their profile.
     * @deny (create) User cannot create a profile with an ID that doesn't match their own.
     * @deny (get, list, update, delete) Other users cannot access a profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to projects.
     * @path /projects/{projectId}
     * @allow (get, list) Any user can read project details.
     * @allow (create, update, delete) Only the project owner can modify or delete a project.
     * @deny (create) Non-owners cannot create projects.
     * @deny (update, delete) Non-owners cannot modify or delete projects.
     * @principle Allows public read access with owner-only writes.
     */
    match /projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // CRITICAL: Cannot implement owner-only writes. The 'Project' entity is missing an 'ownerId' or 'authorId' field.
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}