/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles
 * and allows public read access for projects, with owner-only writes.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the user themselves.
 * - /projects/{projectId}: Stores project data, publicly readable, but only modifiable by project owner.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Projects are publicly readable, but only the project owner can create, update, or delete them.
 * - No user listing is allowed.
 *
 * Denormalization for Authorization:
 * - The 'Project' entity lacks an explicit 'ownerId' or 'authorId' field. To securely implement owner-only writes for projects,
 *   the schema MUST be updated to include such a field.
 *   Once this field is added, the rules will validate that the incoming ownership field matches the user's auth UID on create,
 *   and that update/delete operations are performed by the owner.
 *
 * Structural Segregation:
 * - Public project data is stored in a top-level collection (/projects), separate from private user data,
 *   enabling public read access without compromising user privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, list, update, delete) - Authenticated user can only access their own profile data.
     * @deny (create) - If the userId does not match the authenticated user's UID.
     * @deny (update, delete) - If the authenticated user is not the owner.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      //function
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to project documents.
     * @path /projects/{projectId}
     * @allow (get, list) - Anyone can read project data.
     * @allow (create) - Only the authenticated user can create project if they are the owner.
     * @allow (update, delete) - Only the owner of the project can update or delete it, but only if the ownership field exists.
     * @deny (create) - If the incoming ownership field does not match the user's auth UID.
     * @deny (update, delete) - If the user is not the owner or the document doesn't exist.
     * @principle Allows public read access with owner-only writes for projects.
     */
    match /projects/{projectId} {

      //function
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }
      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn()
                    && request.resource.data.keys().hasAll(['name', 'description', 'icon', 'color', 'url', 'size', 'orbit', 'angle', 'speed']); // TODO: Add owner validation once the schema is updated with an ownership field.

      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}