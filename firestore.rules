/**
 * @fileoverview Firestore Security Rules for EmityGate.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model with founders and admins having elevated privileges.
 * Users can only manage their own profiles. Projects are publicly readable, but write access is restricted to founders only.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves or founders.
 * - /projects/{projectId}: Stores project data, publicly readable but writable only by founders.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Founders can create other founders.
 *
 * Denormalization for Authorization:
 * The `isAdmin` and `isFounder` flags are denormalized directly onto the user profile documents to avoid costly `get()` calls when checking for elevated privileges.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile if the UID matches.
     * @allow (update) Authenticated user can update their own profile if the UID matches. Founders can update any user profile.
     * @allow (delete) Authenticated user can delete their own profile if the UID matches. Founders can delete any user profile.
     * @deny (get) Authenticated user cannot read another user's profile.
     * @deny (create) Unauthenticated user cannot create a profile.
     * @deny (update) Authenticated user cannot update another user's profile.
     * @deny (delete) Authenticated user cannot delete another user's profile.
     * @principle Enforces document ownership for writes, allows owner-only reads, grants founder-level access.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isFounder() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isFounder == true;
      }
      
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is disallowed.

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && (isOwner(userId) || isFounder()) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && (isExistingOwner(userId) || isFounder());
    }

    /**
     * @description Controls access to project documents.
     * @path /projects/{projectId}
     * @allow (get) Anyone can read project data.
     * @allow (list) Anyone can list projects.
     * @allow (create) Only founders can create new projects. The founder's UID must be present in the request.
     * @allow (update) Only founders can update projects.
     * @allow (delete) Only founders can delete projects.
     * @deny (create) Non-founders cannot create projects.
     * @deny (update) Non-founders cannot update projects.
     * @deny (delete) Non-founders cannot delete projects.
     * @principle Public read access with owner-only writes, restricts create/update/delete to founders.
     */
    match /projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isFounder() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isFounder == true;
      }
      
      function isExistingFounder() {
        return isFounder() && resource != null;
      }

      allow get: if true;
      allow list: if true;

      allow create: if isFounder();
      allow update: if isExistingFounder();
      allow delete: if isExistingFounder();
    }
  }
}