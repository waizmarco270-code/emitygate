/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles.
 *
 * Data Structure:
 * - All user data is stored under `/users/{userId}`.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profiles.
 * - Admin and founder roles are managed directly on the user profile document,
 *   allowing for role-based access control in other parts of the application.
 * - User listing is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * - The `isAdmin` and `isFounder` fields are denormalized directly onto the user profile
 *   document to allow for efficient role-based access control without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the UID matches the document ID.
     * @allow (update) Authenticated user can update their own profile.
     * @allow (get) Authenticated user can read their own profile.
     * @deny (create) If the UID doesn't match the document ID, the creation is denied.
     * @deny (update) Unauthenticated users cannot update profiles.
     * @deny (get) Unauthenticated users cannot read profiles.
     * @deny (delete) Users cannot delete their profiles through the API.
     * @deny (list) User listing is not allowed.
     * @principle Enforces document ownership and prevents unauthorized access to user data.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow a user to create their own profile if the UID matches.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;

      // Allow a user to get their own profile.
      allow get: if isOwner(userId);

      // Allow a user to update their own profile.  Enforce immutability of the uid field.
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;

      // No one can delete a user's profile via the rules.
      allow delete: if false;

      // No listing of users.
      allow list: if false;
    }
  }
}