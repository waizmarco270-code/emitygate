/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles,
 *              allows public read access to projects with owner-only writes,
 *              and restricts access to application settings to authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information. Access is restricted to the owner (the user with the matching userId) for create, update, and delete operations.
 * - /projects/{projectId}: Stores information about EmityGate projects. Public read access is granted, but create, update, and delete operations are restricted to the project owner.
 * - /settings/appDetails: Stores global application settings. Only authenticated users can read or write to this document.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All write operations require authentication.
 *
 * Denormalization for Authorization:
 * - The `Project` entity lacks an `ownerId` field. To enable owner-only writes, the rules will require this field to be present in the document and match the authenticated user's UID on create. Update and delete operations will then validate ownership against this field.
 *
 * Structural Segregation:
 * - Public project data is stored in the top-level `/projects` collection, separate from any user-specific private data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User 'user_abc' can create their profile if request.auth.uid == 'user_abc'.
     * @allow (get, list) - User 'user_abc' can read their profile.
     * @deny (create) - User 'user_xyz' cannot create a profile for user 'user_abc'.
     * @deny (update, delete) - Only the owner can update or delete their profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the existing owner of the document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      // Allow the user to create their own profile if the UID matches.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;

      // Only the owner can update their profile.
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;

      // Only the owner can delete their profile.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to project documents. Allows public reads, but restricts writes to the owner.
     * @path /projects/{projectId}
     * @allow (get, list) - Any user can read any project.
     * @allow (create) - User 'user_abc' can create a project if request.auth.uid matches the project's ownerId.
     * @deny (create) - User 'user_xyz' cannot create a project for user 'user_abc'.
     * @deny (update, delete) - Only the owner can update or delete their projects.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /projects/{projectId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document.
      function isOwner(ownerId) {
        return isSignedIn() && request.auth.uid == ownerId;
      }

      // Helper function to check if the user is the existing owner of the document.
      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get: if true;
      allow list: if true;

      // Allow creating a project if the ownerId matches the authenticated user.
      allow create: if isSignedIn() && isOwner(request.resource.data.ownerId);

      // Only the owner can update the project.
      allow update: if isExistingOwner(resource.data.ownerId);

      // Only the owner can delete the project.
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

     /**
      * @description Controls access to application settings. Requires authentication for all operations.
      * @path /settings/appDetails
      * @allow (get, list) - Any signed-in user can read the settings.
      * @allow (create, update, delete) - Any signed-in user can create, update, or delete the settings.
      * @principle Requires authentication for all operations.
      */
    match /settings/appDetails {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;

      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}